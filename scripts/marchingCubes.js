/*
	@license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt
	
	Copyright (C) 2018 SabineWren
	https://github.com/SabineWren
	
	GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007
	https://www.gnu.org/licenses/agpl-3.0.html
	
	@license-end
*/
export { Polygonize };

const size = 10;
const radius = 120.0;
const offsetX = 180.0;
const offsetY = 180.0;
const offsetZ = 0.0;

//convention from 1987 MC paper, V1-V8
const VERTICES = Object.freeze([
	[0, 0, 0],
	[1, 0, 0],
	[1, 1, 0],
	[0, 1, 0],
	[0, 0, 1],
	[1, 0, 1],
	[1, 1, 1],
	[0, 1, 1],
]);

//each edge maps to a pair of vertex indices
const EDGES = Object.freeze([
	[0, 1],
	[1, 2],
	[2, 3],
	[3, 0],
	[4, 5],
	[5, 6],
	[6, 7],
	[7, 4],
	[0, 4],
	[1, 5],
	[2, 6],
	[3, 7],
]);

//each triple maps to three edge indices
const CASES = Object.freeze([
	[],
	[[8, 0, 3]],
	[[1, 0, 9]],
	[[8, 1, 3], [8, 9, 1]],
	[[10, 2, 1]],
	[[8, 0, 3], [1, 10, 2]],
	[[9, 2, 0], [9, 10, 2]],
	[[3, 8, 2], [2, 8, 10], [10, 8, 9]],
	[[3, 2, 11]],
	[[0, 2, 8], [2, 11, 8]],
	[[1, 0, 9], [2, 11, 3]],
	[[2, 9, 1], [11, 9, 2], [8, 9, 11]],
	[[3, 10, 11], [3, 1, 10]],
	[[1, 10, 0], [0, 10, 8], [8, 10, 11]],
	[[0, 11, 3], [9, 11, 0], [10, 11, 9]],
	[[8, 9, 11], [11, 9, 10]],
	[[7, 4, 8]],
	[[3, 7, 0], [7, 4, 0]],
	[[7, 4, 8], [9, 1, 0]],
	[[9, 1, 4], [4, 1, 7], [7, 1, 3]],
	[[7, 4, 8], [2, 1, 10]],
	[[4, 3, 7], [4, 0, 3], [2, 1, 10]],
	[[2, 0, 10], [0, 9, 10], [7, 4, 8]],
	[[9, 10, 4], [4, 10, 3], [3, 10, 2], [4, 3, 7]],
	[[4, 8, 7], [3, 2, 11]],
	[[7, 4, 11], [11, 4, 2], [2, 4, 0]],
	[[1, 0, 9], [2, 11, 3], [8, 7, 4]],
	[[2, 11, 1], [1, 11, 9], [9, 11, 7], [9, 7, 4]],
	[[10, 11, 1], [11, 3, 1], [4, 8, 7]],
	[[4, 0, 7], [7, 0, 10], [0, 1, 10], [7, 10, 11]],
	[[7, 4, 8], [0, 11, 3], [9, 11, 0], [10, 11, 9]],
	[[4, 11, 7], [9, 11, 4], [10, 11, 9]],
	[[9, 4, 5]],
	[[9, 4, 5], [0, 3, 8]],
	[[0, 5, 1], [0, 4, 5]],
	[[4, 3, 8], [5, 3, 4], [1, 3, 5]],
	[[5, 9, 4], [10, 2, 1]],
	[[8, 0, 3], [1, 10, 2], [4, 5, 9]],
	[[10, 4, 5], [2, 4, 10], [0, 4, 2]],
	[[3, 10, 2], [8, 10, 3], [5, 10, 8], [4, 5, 8]],
	[[9, 4, 5], [11, 3, 2]],
	[[11, 0, 2], [11, 8, 0], [9, 4, 5]],
	[[5, 1, 4], [1, 0, 4], [11, 3, 2]],
	[[5, 1, 4], [4, 1, 11], [1, 2, 11], [4, 11, 8]],
	[[3, 10, 11], [3, 1, 10], [5, 9, 4]],
	[[9, 4, 5], [1, 10, 0], [0, 10, 8], [8, 10, 11]],
	[[5, 0, 4], [11, 0, 5], [11, 3, 0], [10, 11, 5]],
	[[5, 10, 4], [4, 10, 8], [8, 10, 11]],
	[[9, 7, 5], [9, 8, 7]],
	[[0, 5, 9], [3, 5, 0], [7, 5, 3]],
	[[8, 7, 0], [0, 7, 1], [1, 7, 5]],
	[[7, 5, 3], [3, 5, 1]],
	[[7, 5, 8], [5, 9, 8], [2, 1, 10]],
	[[10, 2, 1], [0, 5, 9], [3, 5, 0], [7, 5, 3]],
	[[8, 2, 0], [5, 2, 8], [10, 2, 5], [7, 5, 8]],
	[[2, 3, 10], [10, 3, 5], [5, 3, 7]],
	[[9, 7, 5], [9, 8, 7], [11, 3, 2]],
	[[0, 2, 9], [9, 2, 7], [7, 2, 11], [9, 7, 5]],
	[[3, 2, 11], [8, 7, 0], [0, 7, 1], [1, 7, 5]],
	[[11, 1, 2], [7, 1, 11], [5, 1, 7]],
	[[3, 1, 11], [11, 1, 10], [8, 7, 9], [9, 7, 5]],
	[[11, 7, 0], [7, 5, 0], [5, 9, 0], [10, 11, 0], [1, 10, 0]],
	[[0, 5, 10], [0, 7, 5], [0, 8, 7], [0, 10, 11], [0, 11, 3]],
	[[10, 11, 5], [11, 7, 5]],
	[[5, 6, 10]],
	[[8, 0, 3], [10, 5, 6]],
	[[0, 9, 1], [5, 6, 10]],
	[[8, 1, 3], [8, 9, 1], [10, 5, 6]],
	[[1, 6, 2], [1, 5, 6]],
	[[6, 2, 5], [2, 1, 5], [8, 0, 3]],
	[[5, 6, 9], [9, 6, 0], [0, 6, 2]],
	[[5, 8, 9], [2, 8, 5], [3, 8, 2], [6, 2, 5]],
	[[3, 2, 11], [10, 5, 6]],
	[[0, 2, 8], [2, 11, 8], [5, 6, 10]],
	[[3, 2, 11], [0, 9, 1], [10, 5, 6]],
	[[5, 6, 10], [2, 9, 1], [11, 9, 2], [8, 9, 11]],
	[[11, 3, 6], [6, 3, 5], [5, 3, 1]],
	[[11, 8, 6], [6, 8, 1], [1, 8, 0], [6, 1, 5]],
	[[5, 0, 9], [6, 0, 5], [3, 0, 6], [11, 3, 6]],
	[[6, 9, 5], [11, 9, 6], [8, 9, 11]],
	[[7, 4, 8], [6, 10, 5]],
	[[3, 7, 0], [7, 4, 0], [10, 5, 6]],
	[[7, 4, 8], [6, 10, 5], [9, 1, 0]],
	[[5, 6, 10], [9, 1, 4], [4, 1, 7], [7, 1, 3]],
	[[1, 6, 2], [1, 5, 6], [7, 4, 8]],
	[[6, 1, 5], [2, 1, 6], [0, 7, 4], [3, 7, 0]],
	[[4, 8, 7], [5, 6, 9], [9, 6, 0], [0, 6, 2]],
	[[2, 3, 9], [3, 7, 9], [7, 4, 9], [6, 2, 9], [5, 6, 9]],
	[[2, 11, 3], [7, 4, 8], [10, 5, 6]],
	[[6, 10, 5], [7, 4, 11], [11, 4, 2], [2, 4, 0]],
	[[1, 0, 9], [8, 7, 4], [3, 2, 11], [5, 6, 10]],
	[[1, 2, 9], [9, 2, 11], [9, 11, 4], [4, 11, 7], [5, 6, 10]],
	[[7, 4, 8], [11, 3, 6], [6, 3, 5], [5, 3, 1]],
	[[11, 0, 1], [11, 4, 0], [11, 7, 4], [11, 1, 5], [11, 5, 6]],
	[[6, 9, 5], [0, 9, 6], [11, 0, 6], [3, 0, 11], [4, 8, 7]],
	[[5, 6, 9], [9, 6, 11], [9, 11, 7], [9, 7, 4]],
	[[4, 10, 9], [4, 6, 10]],
	[[10, 4, 6], [10, 9, 4], [8, 0, 3]],
	[[1, 0, 10], [10, 0, 6], [6, 0, 4]],
	[[8, 1, 3], [6, 1, 8], [6, 10, 1], [4, 6, 8]],
	[[9, 2, 1], [4, 2, 9], [6, 2, 4]],
	[[3, 8, 0], [9, 2, 1], [4, 2, 9], [6, 2, 4]],
	[[0, 4, 2], [2, 4, 6]],
	[[8, 2, 3], [4, 2, 8], [6, 2, 4]],
	[[4, 10, 9], [4, 6, 10], [2, 11, 3]],
	[[11, 8, 2], [2, 8, 0], [6, 10, 4], [4, 10, 9]],
	[[2, 11, 3], [1, 0, 10], [10, 0, 6], [6, 0, 4]],
	[[8, 4, 1], [4, 6, 1], [6, 10, 1], [11, 8, 1], [2, 11, 1]],
	[[3, 1, 11], [11, 1, 4], [1, 9, 4], [11, 4, 6]],
	[[6, 11, 1], [11, 8, 1], [8, 0, 1], [4, 6, 1], [9, 4, 1]],
	[[3, 0, 11], [11, 0, 6], [6, 0, 4]],
	[[4, 11, 8], [4, 6, 11]],
	[[6, 8, 7], [10, 8, 6], [9, 8, 10]],
	[[3, 7, 0], [0, 7, 10], [7, 6, 10], [0, 10, 9]],
	[[1, 6, 10], [0, 6, 1], [7, 6, 0], [8, 7, 0]],
	[[10, 1, 6], [6, 1, 7], [7, 1, 3]],
	[[9, 8, 1], [1, 8, 6], [6, 8, 7], [1, 6, 2]],
	[[9, 7, 6], [9, 3, 7], [9, 0, 3], [9, 6, 2], [9, 2, 1]],
	[[7, 6, 8], [8, 6, 0], [0, 6, 2]],
	[[3, 6, 2], [3, 7, 6]],
	[[3, 2, 11], [6, 8, 7], [10, 8, 6], [9, 8, 10]],
	[[7, 9, 0], [7, 10, 9], [7, 6, 10], [7, 0, 2], [7, 2, 11]],
	[[0, 10, 1], [6, 10, 0], [8, 6, 0], [7, 6, 8], [2, 11, 3]],
	[[1, 6, 10], [7, 6, 1], [11, 7, 1], [2, 11, 1]],
	[[1, 9, 6], [9, 8, 6], [8, 7, 6], [3, 1, 6], [11, 3, 6]],
	[[9, 0, 1], [11, 7, 6]],
	[[0, 11, 3], [6, 11, 0], [7, 6, 0], [8, 7, 0]],
	[[7, 6, 11]],
	[[11, 6, 7]],
	[[3, 8, 0], [11, 6, 7]],
	[[1, 0, 9], [6, 7, 11]],
	[[1, 3, 9], [3, 8, 9], [6, 7, 11]],
	[[10, 2, 1], [6, 7, 11]],
	[[10, 2, 1], [3, 8, 0], [6, 7, 11]],
	[[9, 2, 0], [9, 10, 2], [11, 6, 7]],
	[[11, 6, 7], [3, 8, 2], [2, 8, 10], [10, 8, 9]],
	[[2, 6, 3], [6, 7, 3]],
	[[8, 6, 7], [0, 6, 8], [2, 6, 0]],
	[[7, 2, 6], [7, 3, 2], [1, 0, 9]],
	[[8, 9, 7], [7, 9, 2], [2, 9, 1], [7, 2, 6]],
	[[6, 1, 10], [7, 1, 6], [3, 1, 7]],
	[[8, 0, 7], [7, 0, 6], [6, 0, 1], [6, 1, 10]],
	[[7, 3, 6], [6, 3, 9], [3, 0, 9], [6, 9, 10]],
	[[7, 8, 6], [6, 8, 10], [10, 8, 9]],
	[[8, 11, 4], [11, 6, 4]],
	[[11, 0, 3], [6, 0, 11], [4, 0, 6]],
	[[6, 4, 11], [4, 8, 11], [1, 0, 9]],
	[[1, 3, 9], [9, 3, 6], [3, 11, 6], [9, 6, 4]],
	[[8, 11, 4], [11, 6, 4], [1, 10, 2]],
	[[1, 10, 2], [11, 0, 3], [6, 0, 11], [4, 0, 6]],
	[[2, 9, 10], [0, 9, 2], [4, 11, 6], [8, 11, 4]],
	[[3, 4, 9], [3, 6, 4], [3, 11, 6], [3, 9, 10], [3, 10, 2]],
	[[3, 2, 8], [8, 2, 4], [4, 2, 6]],
	[[2, 4, 0], [6, 4, 2]],
	[[0, 9, 1], [3, 2, 8], [8, 2, 4], [4, 2, 6]],
	[[1, 2, 9], [9, 2, 4], [4, 2, 6]],
	[[10, 3, 1], [4, 3, 10], [4, 8, 3], [6, 4, 10]],
	[[10, 0, 1], [6, 0, 10], [4, 0, 6]],
	[[3, 10, 6], [3, 9, 10], [3, 0, 9], [3, 6, 4], [3, 4, 8]],
	[[9, 10, 4], [10, 6, 4]],
	[[9, 4, 5], [7, 11, 6]],
	[[9, 4, 5], [7, 11, 6], [0, 3, 8]],
	[[0, 5, 1], [0, 4, 5], [6, 7, 11]],
	[[11, 6, 7], [4, 3, 8], [5, 3, 4], [1, 3, 5]],
	[[1, 10, 2], [9, 4, 5], [6, 7, 11]],
	[[8, 0, 3], [4, 5, 9], [10, 2, 1], [11, 6, 7]],
	[[7, 11, 6], [10, 4, 5], [2, 4, 10], [0, 4, 2]],
	[[8, 2, 3], [10, 2, 8], [4, 10, 8], [5, 10, 4], [11, 6, 7]],
	[[2, 6, 3], [6, 7, 3], [9, 4, 5]],
	[[5, 9, 4], [8, 6, 7], [0, 6, 8], [2, 6, 0]],
	[[7, 3, 6], [6, 3, 2], [4, 5, 0], [0, 5, 1]],
	[[8, 1, 2], [8, 5, 1], [8, 4, 5], [8, 2, 6], [8, 6, 7]],
	[[9, 4, 5], [6, 1, 10], [7, 1, 6], [3, 1, 7]],
	[[7, 8, 6], [6, 8, 0], [6, 0, 10], [10, 0, 1], [5, 9, 4]],
	[[3, 0, 10], [0, 4, 10], [4, 5, 10], [7, 3, 10], [6, 7, 10]],
	[[8, 6, 7], [10, 6, 8], [5, 10, 8], [4, 5, 8]],
	[[5, 9, 6], [6, 9, 11], [11, 9, 8]],
	[[11, 6, 3], [3, 6, 0], [0, 6, 5], [0, 5, 9]],
	[[8, 11, 0], [0, 11, 5], [5, 11, 6], [0, 5, 1]],
	[[6, 3, 11], [5, 3, 6], [1, 3, 5]],
	[[10, 2, 1], [5, 9, 6], [6, 9, 11], [11, 9, 8]],
	[[3, 11, 0], [0, 11, 6], [0, 6, 9], [9, 6, 5], [1, 10, 2]],
	[[0, 8, 5], [8, 11, 5], [11, 6, 5], [2, 0, 5], [10, 2, 5]],
	[[11, 6, 3], [3, 6, 5], [3, 5, 10], [3, 10, 2]],
	[[3, 9, 8], [6, 9, 3], [5, 9, 6], [2, 6, 3]],
	[[9, 6, 5], [0, 6, 9], [2, 6, 0]],
	[[6, 5, 8], [5, 1, 8], [1, 0, 8], [2, 6, 8], [3, 2, 8]],
	[[2, 6, 1], [6, 5, 1]],
	[[6, 8, 3], [6, 9, 8], [6, 5, 9], [6, 3, 1], [6, 1, 10]],
	[[1, 10, 0], [0, 10, 6], [0, 6, 5], [0, 5, 9]],
	[[3, 0, 8], [6, 5, 10]],
	[[10, 6, 5]],
	[[5, 11, 10], [5, 7, 11]],
	[[5, 11, 10], [5, 7, 11], [3, 8, 0]],
	[[11, 10, 7], [10, 5, 7], [0, 9, 1]],
	[[5, 7, 10], [10, 7, 11], [9, 1, 8], [8, 1, 3]],
	[[2, 1, 11], [11, 1, 7], [7, 1, 5]],
	[[3, 8, 0], [2, 1, 11], [11, 1, 7], [7, 1, 5]],
	[[2, 0, 11], [11, 0, 5], [5, 0, 9], [11, 5, 7]],
	[[2, 9, 5], [2, 8, 9], [2, 3, 8], [2, 5, 7], [2, 7, 11]],
	[[10, 3, 2], [5, 3, 10], [7, 3, 5]],
	[[10, 0, 2], [7, 0, 10], [8, 0, 7], [5, 7, 10]],
	[[0, 9, 1], [10, 3, 2], [5, 3, 10], [7, 3, 5]],
	[[7, 8, 2], [8, 9, 2], [9, 1, 2], [5, 7, 2], [10, 5, 2]],
	[[3, 1, 7], [7, 1, 5]],
	[[0, 7, 8], [1, 7, 0], [5, 7, 1]],
	[[9, 5, 0], [0, 5, 3], [3, 5, 7]],
	[[5, 7, 9], [7, 8, 9]],
	[[4, 10, 5], [8, 10, 4], [11, 10, 8]],
	[[3, 4, 0], [10, 4, 3], [10, 5, 4], [11, 10, 3]],
	[[1, 0, 9], [4, 10, 5], [8, 10, 4], [11, 10, 8]],
	[[4, 3, 11], [4, 1, 3], [4, 9, 1], [4, 11, 10], [4, 10, 5]],
	[[1, 5, 2], [2, 5, 8], [5, 4, 8], [2, 8, 11]],
	[[5, 4, 11], [4, 0, 11], [0, 3, 11], [1, 5, 11], [2, 1, 11]],
	[[5, 11, 2], [5, 8, 11], [5, 4, 8], [5, 2, 0], [5, 0, 9]],
	[[5, 4, 9], [2, 3, 11]],
	[[3, 4, 8], [2, 4, 3], [5, 4, 2], [10, 5, 2]],
	[[5, 4, 10], [10, 4, 2], [2, 4, 0]],
	[[2, 8, 3], [4, 8, 2], [10, 4, 2], [5, 4, 10], [0, 9, 1]],
	[[4, 10, 5], [2, 10, 4], [1, 2, 4], [9, 1, 4]],
	[[8, 3, 4], [4, 3, 5], [5, 3, 1]],
	[[1, 5, 0], [5, 4, 0]],
	[[5, 0, 9], [3, 0, 5], [8, 3, 5], [4, 8, 5]],
	[[5, 4, 9]],
	[[7, 11, 4], [4, 11, 9], [9, 11, 10]],
	[[8, 0, 3], [7, 11, 4], [4, 11, 9], [9, 11, 10]],
	[[0, 4, 1], [1, 4, 11], [4, 7, 11], [1, 11, 10]],
	[[10, 1, 4], [1, 3, 4], [3, 8, 4], [11, 10, 4], [7, 11, 4]],
	[[9, 4, 1], [1, 4, 2], [2, 4, 7], [2, 7, 11]],
	[[1, 9, 2], [2, 9, 4], [2, 4, 11], [11, 4, 7], [3, 8, 0]],
	[[11, 4, 7], [2, 4, 11], [0, 4, 2]],
	[[7, 11, 4], [4, 11, 2], [4, 2, 3], [4, 3, 8]],
	[[10, 9, 2], [2, 9, 7], [7, 9, 4], [2, 7, 3]],
	[[2, 10, 7], [10, 9, 7], [9, 4, 7], [0, 2, 7], [8, 0, 7]],
	[[10, 4, 7], [10, 0, 4], [10, 1, 0], [10, 7, 3], [10, 3, 2]],
	[[8, 4, 7], [10, 1, 2]],
	[[4, 1, 9], [7, 1, 4], [3, 1, 7]],
	[[8, 0, 7], [7, 0, 1], [7, 1, 9], [7, 9, 4]],
	[[0, 7, 3], [0, 4, 7]],
	[[8, 4, 7]],
	[[9, 8, 10], [10, 8, 11]],
	[[3, 11, 0], [0, 11, 9], [9, 11, 10]],
	[[0, 10, 1], [8, 10, 0], [11, 10, 8]],
	[[11, 10, 3], [10, 1, 3]],
	[[1, 9, 2], [2, 9, 11], [11, 9, 8]],
	[[9, 2, 1], [11, 2, 9], [3, 11, 9], [0, 3, 9]],
	[[8, 2, 0], [8, 11, 2]],
	[[11, 2, 3]],
	[[2, 8, 3], [10, 8, 2], [9, 8, 10]],
	[[0, 2, 9], [2, 10, 9]],
	[[3, 2, 8], [8, 2, 10], [8, 10, 1], [8, 1, 0]],
	[[1, 2, 10]],
	[[3, 1, 8], [1, 9, 8]],
	[[9, 0, 1]],
	[[3, 0, 8]],
	[]
]);

const scalarCircle = function(x, y, z) {
	const cx = x - offsetX;
	const cy = y - offsetY;
	const cz = z - offsetZ
	return radius - Math.sqrt(cx * cx + cy * cy + cz * cz);
};

const scalarCircleDx = function(x, y, z) {
	const cx = x - offsetX;
	const cy = y - offsetY;
	const cz = z - offsetZ;
	return -cx /( Math.sqrt(cx * cx + cy * cy + cz * cz));
};

const scalarCircleDy = function(x, y, z) {
	const cx = x - offsetX;
	const cy = y - offsetY;
	const cz = z - offsetZ;
	return -cy /( Math.sqrt(cx * cx + cy * cy + cz * cz));
};

const scalarCircleDz = function(x, y, z) {
	const cx = x - offsetX;
	const cy = y - offsetY;
	const cz = z - offsetZ;
	return -cz /( Math.sqrt(cx * cx + cy * cy + cz * cz));
};

//Newton-Raphson interpolation
const iX = function(x, y, z) {
	let limit = 20;
	const f = scalarCircle;
	const df = scalarCircleDx;
	let xn = x + size / 2.0;
	let fxn = f(xn, y, z);
	while(Math.abs(fxn) > 0.01) {
		const dfxn = df(xn, y, z);
		xn = xn - fxn/dfxn;
		fxn = f(xn, y);
		limit--;
		if(limit < 0) {
			limit = 30;
			xn = x + size * Math.random();
		}
	}
	return xn;
};
const iY = function(x, y, z) {
	let limit = 30;
	const f = scalarCircle;
	const df = scalarCircleDy;
	let yn = y + size / 2.0;
	let fyn = f(x, yn, z);
	while(Math.abs(fyn) > 0.01) {
		const dfyn = df(x, yn, z);
		yn = yn - fyn/dfyn;
		fyn = f(x, yn);
		limit--;
		if(limit < 0) {
			limit = 30;
			yn = y + size * Math.random();
		}
	}
	return yn;
};
const iZ = function(x, y, z) {
	let limit = 30;
	const f = scalarCircle;
	const df = scalarCircleDz;
	let zn = z + size / 2.0;
	let fzn = f(x, y, zn);
	while(Math.abs(fzn) > 0.01) {
		const dfzn = df(x, y, zn);
		zn = zn - fzn/dfzn;
		fzn = f(x, y, zn);
		limit--;
		if(limit < 0) {
			limit = 30;
			zn = z + size * Math.random();
		}
	}
	return zn;
};

const getVertex = function(x, y, z, edge) {
	const x1 = x; const x2 = x + size;
	const y1 = y; const y2 = y + size;
	const z1 = z; const z2 = z + size;
	switch(edge) {
		case 0://v1[0, 0, 0] to v2[1, 0, 0]
			return [iX(x1, y1, z1), y1, z1];
		case 1://v2[1, 0, 0] to v3[1, 1, 0]
			return [x2, iY(x2, y1, z1), z1];
		case 2://v3[1, 1, 0] to v4[0, 1, 0]
			return [iX(x1, y2, z1), y2, z1];
		case 3://v4[0, 1, 0] to v1[0, 0, 0]
			return [x1, iY(x1, y1, z1), z1];
		case 4://v5[0, 0, 1] to v6[1, 0, 1]
			return [iX(x1, y1, z2), y1, z2];
		case 5://v6[1, 0, 1] to v7[1, 1, 1]
			return [x2, iY(x2, y1, z2), z2];
		case 6://v7[1, 1, 1] to v8[0, 1, 1]
			return [iX(x1, y2, z2), y2, z2];
		case 7://v8[0, 1, 1] to v5[0, 0, 1]
			return [x1, iY(x1, y1, z2), z2];
		case 8://v1[0, 0, 0] to v5[0, 0, 1]
			return [x1, y1, iZ(x1, y1, z1)];
		case 9://v2[1, 0, 0] to v6[1, 0, 1]
			return [x2, y1, iZ(x2, y1, z1)];
		case 10://v3[1, 1, 0] to v7[1, 1, 1]
			return [x2, y2, iZ(x2, y2, z1)];
		case 11://v4[0, 1, 0] to v8[0, 1, 1]
			return [x1, y2, iZ(x1, y2, z1)];
	}
};

const getVertices = function(x, y, z) {
	const x1 = x;
	const y1 = y;
	const z1 = z;
	const x2 = x + size;
	const y2 = y + size;
	const z2 = z + size;

	const f = scalarCircle;
	const isV1 = f(x1, y1, z1) > 0.0;
	const isV2 = f(x2, y1, z1) > 0.0;
	const isV3 = f(x2, y2, z1) > 0.0;
	const isV4 = f(x1, y2, z1) > 0.0;
	const isV5 = f(x1, y1, z2) > 0.0;
	const isV6 = f(x2, y1, z2) > 0.0;
	const isV7 = f(x2, y2, z2) > 0.0;
	const isV8 = f(x1, y2, z2) > 0.0;
	const bitmask =
		(isV1 ? 0x01 : 0) | (isV2 ? 0x02 : 0) | (isV3 ? 0x04 : 0) | (isV4 ? 0x08 : 0) |
		(isV5 ? 0x10 : 0) | (isV6 ? 0x20 : 0) | (isV7 ? 0x40 : 0) | (isV8 ? 0x80 : 0);
	
	const faces = CASES[bitmask];
	const vertices = [];
	for(let face of faces) {
		const edge1 = face[0];
		const edge2 = face[1];
		const edge3 = face[2];
		const v1 = getVertex(x, y, z, edge1);
		const v2 = getVertex(x, y, z, edge2);
		const v3 = getVertex(x, y, z, edge3);
		vertices.push(v1);
		vertices.push(v2);
		vertices.push(v3);
	}
	return vertices;
};

const Polygonize = function() {
	const maxX = offsetX + radius;
	const maxY = offsetY + radius;
	const maxZ = offsetZ + radius;
	
	const triangles = [];
	let x = offsetX - radius - size;
	for(; x <= maxX; x += size) {
		let y = offsetY - radius - size
		for(; y <= maxY; y += size) {
			let z = offsetZ - radius - size;
			for(; z <= maxZ; z += size) {
				const faces = getVertices(x, y, z);
				faces.forEach(face => triangles.push(face));
			}
		}
	}
	return triangles;
};

